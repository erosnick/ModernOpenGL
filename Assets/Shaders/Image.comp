#version 460 core

layout (local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// RGBA image
layout (rgba32f, binding = 0) uniform image2D outImage;

struct Ray
{
    vec3 origin;
    vec3 direction;
};

struct Sphere
{
    vec3 center;
    float radius;
    vec4 color;
};

struct HitResult
{
    bool hit;
    float t;
};

vec3 at(Ray ray, float t)
{
    return ray.origin + ray.direction * t;
}

HitResult hit(Ray ray, Sphere sphere)
{
    vec3 oc = ray.origin - sphere.center;

    // float a = dot(ray.direction, ray.direction);

    // float b = dot(ray.direction, oc) * 2.0;
    // float c = dot(oc, oc) - sphere.radius * sphere.radius;

    // float discriminant = b * b - 4.0 * a * c;

    float a = dot(ray.direction,ray.direction);
    float halfB = dot(oc, ray.direction);
    float c = dot(oc, oc) - sphere.radius * sphere.radius;
    float discriminant = halfB * halfB - a * c;
    
    HitResult hitResult;

    // Hit one or both sides
    hitResult.hit = discriminant > 0.0;

    if (discriminant < 0.0)
    {
        hitResult.t = -1.0;
    }
    else
    {
        hitResult.t = (-halfB - sqrt(discriminant)) / a;
    }

    return hitResult;
}

void main()
{
    vec3 color = vec3(0.3, 0.3, 0.3);
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

    // Fetch image dimensions
    ivec2 resolution = imageSize(outImage);
 
    float aspect = float(resolution.x) / resolution.y;
    
    float viewportHeight = 2.0;;
    float viewportWidth = viewportHeight * aspect;
    float focalLength = 1.0;

    float x = (float(texelCoord.x * 2.0 - resolution.x) / resolution.x);
    float y = (float(texelCoord.y * 2.0 - resolution.y) / resolution.y);  

    vec3 origin = vec3(0.0, 0.0, 0.0);

    vec3 horizontal = vec3(viewportWidth, 0.0, 0.0);
    vec3 vertical = vec3(0.0, viewportHeight, 0.0);

    vec3 lowerLeftCorner = origin - horizontal * 0.5 - vertical * 0.5 - vec3(0.0, 0.0, focalLength);

    x = (float(texelCoord.x) / resolution.x);
    y = (float(texelCoord.y) / resolution.y);

    y = 1.0 - y;

    vec3 direction = lowerLeftCorner + x * horizontal + y * vertical - origin;

    // direction = vec3(x * viewportWidth * 0.5, y * viewportHeight * 0.5, -1.0);

    Ray ray = Ray(origin, normalize(direction));

    Sphere spheres[3];

    spheres[0] = Sphere(vec3(0.0, 0.0, -1.0), 0.5, vec4(0.4, 0.4, 1.0, 1.0));
    spheres[1] = Sphere(vec3(1.0, 0.0, -1.0), 0.5, vec4(1.0, 0.4, 0.4, 1.0));
    spheres[2] = Sphere(vec3(-1.0, 0.0, -1.0), 0.5, vec4(0.4, 1.0, 0.4, 1.0));

    for (int i = 0; i < 1; i++)
    {
        Sphere sphere = spheres[i];

        HitResult hitResult = hit(ray,sphere);

        if (hitResult.t > 0.0)
        {
            vec3 normal = normalize(at(ray, hitResult.t) - sphere.center);

            color = vec3(normal.x + 1.0, normal.y + 1.0, normal.z + 1.0) * 0.5;
        }
        else
        {
            vec3 unitDirection = normalize(ray.direction);
            float t = 0.5 * (unitDirection.y + 1.0);
            color = (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
        }
    }

    // value.x = float(texelCoord.x) / (gl_NumWorkGroups.x);
    // value.y = float(texelCoord.y) / (gl_NumWorkGroups.y);

    // Store new value in image
    imageStore(outImage, texelCoord, vec4(color, 1.0));
}
